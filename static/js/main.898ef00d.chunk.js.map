{"version":3,"sources":["components/TodoList/TodoList.tsx","Api/Api.ts","components/CurrentUser/CurrentUser.tsx","components/CurrentUser/index.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","selectedUserId","handleUserSelect","changeTodoStatus","handleSearch","handleFilter","handleUserError","changeUser","event","id","currentTarget","dataset","handleStatusChange","target","className","htmlFor","type","placeholder","onChange","title","value","param","map","todo","classNames","completed","checked","onClick","userId","getTodos","fetch","then","responce","json","getUser","CurrentUser","state","user","createdAt","updatedAt","name","username","email","phone","website","clearHandler","clearUser","loadUsers","setState","getUserFromServer","a","serverError","str","String","userLoader","this","prevProps","React","Component","App","filterParameter","searchTitle","userError","error","getFilteredTodos","filtered","todosCopy","filter","includes","todoTitle","todoCopy","changedTodoIndex","findIndex","prevState","getUserMessage","getTodosFromServer","ReactDOM","render","document","getElementById"],"mappings":"+XAoBaA,EAA4B,SAACC,GACxC,IACEC,EAOED,EAPFC,MACAC,EAMEF,EANFE,eACAC,EAKEH,EALFG,iBACAC,EAIEJ,EAJFI,iBACAC,EAGEL,EAHFK,aACAC,EAEEN,EAFFM,aACAC,EACEP,EADFO,gBAeIC,EAAa,SAACC,GAClBF,EAAgB,IAEhB,IAAQG,EAAOD,EAAME,cAAcC,QAA3BF,GAEJA,GACFP,GAAkBO,IAIhBG,EAAqB,SAACJ,GAC1BL,EAAiBK,EAAMK,OAAOJ,KAGhC,OACE,sBAAKK,UAAU,WAAf,UACE,wCAEA,wBAAOC,QAAQ,cAAf,mCAEE,uBACEC,KAAK,OACLP,GAAG,cACHQ,YAAY,cACZC,SApCY,SAACV,GACnB,IAAMW,EAAQX,EAAMK,OAAOO,MAE3BhB,EAAae,SAqCX,yBACEV,GAAG,cACHQ,YAAY,cACZC,SArCe,SAACV,GACpB,IAAMa,EAAQb,EAAMK,OAAOO,MAE3Bf,EAAagB,IA+BX,UAKE,wBAAQD,MAAM,MAAd,sBACA,wBAAQA,MAAM,SAAd,yBACA,wBAAQA,MAAM,YAAd,+BAGF,qBAAKN,UAAU,2BAAf,SACGd,EAAMsB,KAAI,SAAAC,GAAI,OACb,qBAEET,UAAWU,IAAW,iBAAkB,CACtC,6BAA8BD,EAAKE,UACnC,0BAA2BF,EAAKE,YAJpC,UAOE,wBAAOV,QAASQ,EAAKJ,MAArB,UACE,uBACEH,KAAK,WACLU,QAASH,EAAKE,UACdP,SAAUN,EACVH,GAAIc,EAAKJ,QAEX,4BAAII,EAAKJ,WAGX,yBACEQ,QAASpB,EACTO,UAAWU,IAAW,wBAAyB,SAAU,CACvD,kCAAmCvB,IAAmBsB,EAAKK,SAE7DZ,KAAK,SACL,UAASO,EAAKK,OANhB,sBASGL,EAAKK,YAzBHL,EAAKd,aCjFToB,G,MAAW,WACtB,OAAOC,MAJS,2CAKbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAGlBC,EAAU,SAACN,GACtB,OAAOE,MARa,2CAQSF,GAC1BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCOzBE,E,4MACJC,MAAQ,CACNC,KAAM,CACJ5B,GAAI,EACJ6B,UAAW,GACXC,UAAW,GACXC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,QAAS,K,EAcbC,aAAe,WACb,EAAK9C,MAAM+C,a,EAGbC,UAAY,WACV,EAAKC,SAAS,CACZX,KAAM,CACJ5B,GAAI,EACJ6B,UAAW,GACXC,UAAW,GACXC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,QAAS,MAGb,EAAKK,qB,EAGPA,kB,sBAAoB,gCAAAC,EAAA,6DAEdC,GAAc,EAFA,kBAKHjB,EAAQ,EAAKnC,MAAME,gBALhB,OAKhBoC,EALgB,uDAOhBc,GAAc,EAERC,EATU,+DASoDC,OAAO,EAAD,KAE1E,EAAKtD,MAAMO,gBAAgB8C,GAXX,QAcbD,GACH,EAAKH,UAAS,SAACZ,GAAD,mBAAC,eACVA,GADS,IAEZC,YAjBc,yD,EAsBpBiB,WAAa,WACX,MAEI,EAAKlB,MAAMC,KADb5B,EADF,EACEA,GAAI+B,EADN,EACMA,KAAME,EADZ,EACYA,MAAOC,EADnB,EACmBA,MAGnB,OAA2B,IAAvB,EAAKP,MAAMC,KAAK5B,GAEhB,qBAAKK,UAAU,cAAf,SACE,oBAAIA,UAAU,qBAAd,SACE,2DASN,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEG,IACAL,OAIL,oBAAIK,UAAU,oBAAd,SAAmC0B,IACnC,mBAAG1B,UAAU,qBAAb,SAAmC4B,IACnC,mBAAG5B,UAAU,qBAAb,SAAmC6B,IAEnC,wBACE7B,UAAU,qBACVE,KAAK,SACLW,QAAS,EAAKkB,aAHhB,uB,uDAnFN,WACEU,KAAKN,sB,gCAGP,SAAmBO,GACbD,KAAKxD,MAAME,iBAAmBuD,EAAUvD,gBAC1CsD,KAAKR,c,oBAwFT,WACE,OACE,mCACGQ,KAAKD,mB,GA/GYG,IAAMC,WCfjBvB,EDoIAA,EEvHTwB,E,4MACJvB,MAAe,CACbnC,eAAgB,EAChBD,MAAO,GACP4D,gBAAiB,MACjBC,YAAa,GACbC,UAAW,I,EAObxD,gBAAkB,SAACyD,GACjB,EAAKf,SAAS,CACZc,UAAWC,K,EAIf3D,aAAe,SAACyD,GACd,EAAKb,SAAS,CACZa,iB,EAIJxD,aAAe,SAACuD,GACd,EAAKZ,SAAS,CACZY,qB,EAIJ1D,iBAAmB,SAAC0B,GAClB,EAAKoB,SAAS,CACZ/C,eAAgB2B,K,EAIpBkB,UAAY,WACV,EAAKE,SAAS,CACZ/C,eAAgB,K,EAIpB+D,iBAAmB,WACjB,IAEIC,EAFJ,EAAyC,EAAK7B,MAAtCwB,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,YACnBK,EAAS,YAAO,EAAK9B,MAAMpC,OAGjC,OAAQ4D,GACN,IAAK,SACHK,EAAWC,EAAUC,QAAO,SAAA5C,GAAI,OAAuB,IAAnBA,EAAKE,aACzC,MAEF,IAAK,YACHwC,EAAWC,EAAUC,QAAO,SAAA5C,GAAI,OAAuB,IAAnBA,EAAKE,aACzC,MAEF,QACEwC,EAAWC,EAMf,OAFAD,EAAWA,EAASE,QAAO,SAAA5C,GAAI,OAAIA,EAAKJ,MAAMiD,SAASP,O,EAKzD1D,iBAAmB,SAACkE,GAClB,IAAMC,EAAQ,YAAO,EAAKlC,MAAMpC,OAC1BuE,EAAmBD,EAASE,WAAU,SAAAjD,GAAI,OAAIA,EAAKJ,QAAUkD,KAEnEC,EAASC,GAAkB9C,WAAa6C,EAASC,GAAkB9C,UAEnE,EAAKuB,UAAS,SAAAyB,GAAS,kCAClBA,GADkB,IAErBzE,MAAOsE,Q,EAIXI,eAAiB,WACf,MAA6B,KAAzB,EAAKtC,MAAM0B,UAEX,qBAAKhD,UAAU,yBAAf,SACG,EAAKsB,MAAM0B,YAMhB,qBAAKhD,UAAU,yBAAf,SACG,EAAKsB,MAAMnC,eACV,cAAC,EAAD,CACEA,eAAgB,EAAKmC,MAAMnC,eAC3B6C,UAAW,EAAKA,UAChBxC,gBAAiB,EAAKA,kBAEtB,sB,EAKVqE,mB,sBAAqB,4BAAAzB,EAAA,sEACCrB,IADD,OACb7B,EADa,OAGnB,EAAKgD,SAAS,CAAEhD,UAHG,2C,uDA5FrB,WACEuD,KAAKoB,uB,oBAiGP,WACE,IAAQ1E,EAAmBsD,KAAKnB,MAAxBnC,eAER,OACE,sBAAKa,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEd,MAAOuD,KAAKS,mBACZ/D,eAAgBA,EAChBC,iBAAkBqD,KAAKrD,iBACvBC,iBAAkBoD,KAAKpD,iBACvBC,aAAcmD,KAAKnD,aACnBC,aAAckD,KAAKlD,aACnBC,gBAAiBiD,KAAKjD,oBAI1B,qBAAKQ,UAAU,eAAf,SACGyC,KAAKmB,0B,GA7HEjB,IAAMC,WAoITC,IChJfiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.898ef00d.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype HandleUserSelect = (userId: number) => void;\ntype ChangeTodoStatus = (todoTitle: string) => void;\ntype HandleSearch = (searchTitle: string) => void;\ntype HandleFilter = (filterParameter: string) => void;\ntype HandleUserError = (error: string) => void;\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  handleUserSelect: HandleUserSelect;\n  changeTodoStatus: ChangeTodoStatus;\n  handleSearch: HandleSearch;\n  handleFilter: HandleFilter;\n  handleUserError: HandleUserError;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos,\n    selectedUserId,\n    handleUserSelect,\n    changeTodoStatus,\n    handleSearch,\n    handleFilter,\n    handleUserError,\n  } = props;\n\n  const searchInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const title = event.target.value;\n\n    handleSearch(title);\n  };\n\n  const filterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const param = event.target.value;\n\n    handleFilter(param);\n  };\n\n  const changeUser = (event: React.MouseEvent<HTMLButtonElement>) => {\n    handleUserError('');\n\n    const { id } = event.currentTarget.dataset;\n\n    if (id) {\n      handleUserSelect(+id);\n    }\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent) => {\n    changeTodoStatus(event.target.id);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <label htmlFor=\"searchInput\">\n        Filter todos by title:\n        <input\n          type=\"text\"\n          id=\"searchInput\"\n          placeholder=\"Input title\"\n          onChange={searchInput}\n        />\n      </label>\n\n      <select\n        id=\"selectTodos\"\n        placeholder=\"Input title\"\n        onChange={filterSelect}\n      >\n        <option value=\"All\">Show all</option>\n        <option value=\"Active\">Show active</option>\n        <option value=\"Completed\">Show completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label htmlFor={todo.title}>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={handleStatusChange}\n                id={todo.title}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={changeUser}\n              className={classNames('TodoList__user-button', 'button', {\n                'TodoList__user-button--selected': selectedUserId === todo.userId,\n              })}\n              type=\"button\"\n              data-id={todo.userId}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </div>\n    </div>\n  );\n};\n","const TODOS_URL = 'https://mate.academy/students-api/todos';\nconst USER_BASE_URL = 'https://mate.academy/students-api/users/';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(TODOS_URL)\n    .then(responce => responce.json());\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return fetch(USER_BASE_URL + userId)\n    .then(responce => responce.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../Api/Api';\n\ntype ClearUser = () => void;\ntype HandleUserError = (error: string) => void;\n\ntype Props = {\n  selectedUserId: number;\n  clearUser: ClearUser;\n  handleUserError: HandleUserError;\n};\n\ntype State = {\n  user: User;\n};\n\nclass CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {\n      id: 0,\n      createdAt: '',\n      updatedAt: '',\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n      website: '',\n    },\n  };\n\n  componentDidMount() {\n    this.getUserFromServer();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUserId !== prevProps.selectedUserId) {\n      this.loadUsers();\n    }\n  }\n\n  clearHandler = () => {\n    this.props.clearUser();\n  };\n\n  loadUsers = () => {\n    this.setState({\n      user: {\n        id: 0,\n        createdAt: '',\n        updatedAt: '',\n        name: '',\n        username: '',\n        email: '',\n        phone: '',\n        website: '',\n      },\n    });\n    this.getUserFromServer();\n  };\n\n  getUserFromServer = async () => {\n    let user: User;\n    let serverError = false;\n\n    try {\n      user = await getUser(this.props.selectedUserId);\n    } catch (error) {\n      serverError = true;\n\n      const str = `An error has ocurred while getting data from server: ${String(error)}`;\n\n      this.props.handleUserError(str);\n    }\n\n    if (!serverError) {\n      this.setState((state) => ({\n        ...state,\n        user,\n      }));\n    }\n  };\n\n  userLoader = () => {\n    const {\n      id, name, email, phone,\n    } = this.state.user;\n\n    if (this.state.user.id === 0) {\n      return (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              The data is loading\n            </span>\n          </h2>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={this.clearHandler}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        {this.userLoader()}\n      </>\n    );\n  }\n}\n\nexport default CurrentUser;\n","import CurrentUser from './CurrentUser';\n\nexport default CurrentUser;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport CurrentUser from './components/CurrentUser';\nimport { getTodos } from './Api/Api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  filterParameter: string;\n  searchTitle: string;\n  userError: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    filterParameter: 'All',\n    searchTitle: '',\n    userError: '',\n  };\n\n  componentDidMount() {\n    this.getTodosFromServer();\n  }\n\n  handleUserError = (error: string) => {\n    this.setState({\n      userError: error,\n    });\n  };\n\n  handleSearch = (searchTitle: string) => {\n    this.setState({\n      searchTitle,\n    });\n  };\n\n  handleFilter = (filterParameter: string) => {\n    this.setState({\n      filterParameter,\n    });\n  };\n\n  handleUserSelect = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  getFilteredTodos = () => {\n    const { filterParameter, searchTitle } = this.state;\n    const todosCopy = [...this.state.todos];\n    let filtered: Todo[];\n\n    switch (filterParameter) {\n      case 'Active':\n        filtered = todosCopy.filter(todo => todo.completed !== true);\n        break;\n\n      case 'Completed':\n        filtered = todosCopy.filter(todo => todo.completed === true);\n        break;\n\n      default:\n        filtered = todosCopy;\n        break;\n    }\n\n    filtered = filtered.filter(todo => todo.title.includes(searchTitle));\n\n    return filtered;\n  };\n\n  changeTodoStatus = (todoTitle: string) => {\n    const todoCopy = [...this.state.todos];\n    const changedTodoIndex = todoCopy.findIndex(todo => todo.title === todoTitle);\n\n    todoCopy[changedTodoIndex].completed = !todoCopy[changedTodoIndex].completed;\n\n    this.setState(prevState => ({\n      ...prevState,\n      todos: todoCopy,\n    }));\n  };\n\n  getUserMessage = () => {\n    if (this.state.userError !== '') {\n      return (\n        <div className=\"App__content-container\">\n          {this.state.userError}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App__content-container\">\n        {this.state.selectedUserId ? (\n          <CurrentUser\n            selectedUserId={this.state.selectedUserId}\n            clearUser={this.clearUser}\n            handleUserError={this.handleUserError}\n          />\n        ) : 'No user selected'}\n      </div>\n    );\n  };\n\n  getTodosFromServer = async () => {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.getFilteredTodos()}\n            selectedUserId={selectedUserId}\n            handleUserSelect={this.handleUserSelect}\n            changeTodoStatus={this.changeTodoStatus}\n            handleSearch={this.handleSearch}\n            handleFilter={this.handleFilter}\n            handleUserError={this.handleUserError}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {this.getUserMessage()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}